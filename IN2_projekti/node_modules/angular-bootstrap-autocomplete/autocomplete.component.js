"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("@angular/core");
var AutocompleteComponent = (function () {
    function AutocompleteComponent() {
        this.inputPlaceholder = "Search...";
        this.inputId = 0;
        this.onEntrySelected = new core_1.EventEmitter();
        this.showResults = false;
    }
    AutocompleteComponent.prototype.ngOnInit = function () {
        this.filteredEntities = this.entries;
    };
    AutocompleteComponent.prototype.filterEntries = function (filter) {
        var _this = this;
        if (typeof this.entryProperty != 'undefined') {
            this.filteredEntities = this.entries.filter(function (item) { return item[_this.entryProperty].toLowerCase().indexOf(filter.toLowerCase()) !== -1; });
        }
        else {
            this.filteredEntities = this.entries.filter(function (item) { return item.toLowerCase().indexOf(filter.toLowerCase()) !== -1; });
        }
    };
    AutocompleteComponent.prototype.inputFieldFocused = function () {
        var inputId = 'inputField' + this.inputId;
        var menuId = '#menu' + this.inputId + ' ' + 'a';
        document.getElementById(inputId).addEventListener('keydown', function (e) {
            if (e.key == "ArrowDown") {
                document.querySelectorAll(menuId)[0].focus();
            }
        });
    };
    AutocompleteComponent.prototype.selectEntry = function (entry) {
        if (typeof this.entryProperty != 'undefined') {
            this.filter = entry[this.entryProperty];
        }
        else {
            this.filter = entry;
        }
        this.showResults = false;
        this.onEntrySelected.emit(entry);
    };
    __decorate([
        core_1.Input()
    ], AutocompleteComponent.prototype, "entries");
    __decorate([
        core_1.Input()
    ], AutocompleteComponent.prototype, "entryProperty");
    __decorate([
        core_1.Input()
    ], AutocompleteComponent.prototype, "inputPlaceholder");
    __decorate([
        core_1.Input()
    ], AutocompleteComponent.prototype, "inputId");
    __decorate([
        core_1.Output()
    ], AutocompleteComponent.prototype, "onEntrySelected");
    AutocompleteComponent = __decorate([
        core_1.Component({
            selector: "bootstrap-autocomplete",
            templateUrl: "./autocomplete.component.html",
            styleUrls: ["./autocomplete.component.css"]
        })
    ], AutocompleteComponent);
    return AutocompleteComponent;
}());
exports.AutocompleteComponent = AutocompleteComponent;
//# sourceMappingURL=autocomplete.component.js.map